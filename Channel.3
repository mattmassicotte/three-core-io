include "stdlib.h"
include "stdio.h"
include "unistd.h"
include "errno.h"

import Core::Event::Source

public
import Data

namespace Core::IO

  public
  enum Type
    Stream
    RandomAccess
  end

  public
  struct Channel
    Type type
    Natural descriptor
    *Core::Event::Source read_source
    *{*Core::IO::Data data} read_closure_ptr
    *Core::Event::Source write_source
    *{} write_closure_ptr
  end

  def channel_create(Type type, Natural descriptor; *Channel)
    *Channel channel = malloc(sizeof(Channel))

    channel->type = type
    channel->descriptor = descriptor
    channel->read_source = Core::Event::source_create(Core::Event::Type::Read, descriptor)
    channel->write_source = Core::Event::source_create(Core::Event::Type::Write, descriptor)

    if channel->read_source == null || channel->write_source == null
      printf("Unable to create channel read/write sources")
    end

    return channel
  end

  def Channel.close()
  end

  def Channel.read(Int offset, Natural length, {*Core::IO::Data data} handler)
    self->read_closure_ptr = three_closure_copy(handler)

    printf("[IO:Channel] %p setting read handler\n", self)

    self->read_source.set_handler(do (Natural descriptor, Natural data) {
      *Char buffer = malloc(data + 1)
      ssize_t bytes_read = read(descriptor, buffer, data)

      switch bytes_read
      case 0
        free(buffer)
        printf("eof reached\n")
        self->read_source.cancel()
        return
      case -1
        free(buffer)

        switch errno
        case EAGAIN
          return
        case EWOULDBLOCK
          return
        end

        printf("failed to read %d\n", errno)
        self->read_source.cancel()

        return
      end

      *Core::IO::Data data_obj = Core::IO::data_create(buffer, bytes_read)

      (*self->read_closure_ptr)(data_obj)

      buffer[bytes_read] = 0 # null-terminate the string

      printf("read: %s\n", buffer)
    })

    printf("[IO:Channel] %p set read handler\n", self)
  end

  private
  def send_data(*Core::IO::Data data, Natural descriptor)
    # TODO: this isn't an ideal way to do this
    data.enumerate_regions(0, do (Natural size, *Void buffer) {
      size_t total_written = 0

      loop total_written < size
        *Void write_buffer = buffer + total_written
        Natural buffer_size = size - total_written

        ssize_t bytes_written = write(descriptor, write_buffer, buffer_size)

        if bytes_written == -1
          printf("Failed to write\n")
          return
        end

        printf("wrote %ld bytes\n", bytes_written)

        total_written += bytes_written
      end
    })
  end

  public
  def Channel.write(Int offset, *Core::IO::Data write_data, {} handler)
    self->write_closure_ptr = three_closure_copy(handler)

    self->write_source.set_handler(do (Natural descriptor, Natural data) {
      # nested closure workaround
      Core::IO::send_data(write_data, descriptor)

      (*self->write_closure_ptr)()

      self->write_source.cancel()
    })
  end

end
